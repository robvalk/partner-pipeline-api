// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package handlers

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
	"github.com/robvalk/partner-pipeline-api/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Look for Developers
	// (GET /developers)
	SearchDevelopers(w http.ResponseWriter, r *http.Request, params models.SearchDevelopersParams)
	// Birth a Developer
	// (POST /developers)
	CreateDeveloper(w http.ResponseWriter, r *http.Request)
	// Delete Developer
	// (DELETE /developers/{developerId})
	DeleteDeveloper(w http.ResponseWriter, r *http.Request, developerId string)
	// Get Developer
	// (GET /developers/{developerId})
	GetDeveloper(w http.ResponseWriter, r *http.Request, developerId string)
	// Update Developer
	// (PATCH /developers/{developerId})
	UpdateDeveloper(w http.ResponseWriter, r *http.Request, developerId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// SearchDevelopers operation middleware
func (siw *ServerInterfaceWrapper) SearchDevelopers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params models.SearchDevelopersParams

	// ------------- Optional query parameter "name" -------------
	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "team" -------------
	if paramValue := r.URL.Query().Get("team"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "team", r.URL.Query(), &params.Team)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter team: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "pageSize" -------------
	if paramValue := r.URL.Query().Get("pageSize"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter pageSize: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter sort: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDevelopers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateDeveloper operation middleware
func (siw *ServerInterfaceWrapper) CreateDeveloper(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDeveloper(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteDeveloper operation middleware
func (siw *ServerInterfaceWrapper) DeleteDeveloper(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "developerId" -------------
	var developerId string

	err = runtime.BindStyledParameter("simple", false, "developerId", chi.URLParam(r, "developerId"), &developerId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter developerId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDeveloper(w, r, developerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDeveloper operation middleware
func (siw *ServerInterfaceWrapper) GetDeveloper(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "developerId" -------------
	var developerId string

	err = runtime.BindStyledParameter("simple", false, "developerId", chi.URLParam(r, "developerId"), &developerId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter developerId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDeveloper(w, r, developerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateDeveloper operation middleware
func (siw *ServerInterfaceWrapper) UpdateDeveloper(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "developerId" -------------
	var developerId string

	err = runtime.BindStyledParameter("simple", false, "developerId", chi.URLParam(r, "developerId"), &developerId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter developerId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDeveloper(w, r, developerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/developers", wrapper.SearchDevelopers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/developers", wrapper.CreateDeveloper)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/developers/{developerId}", wrapper.DeleteDeveloper)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/developers/{developerId}", wrapper.GetDeveloper)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/developers/{developerId}", wrapper.UpdateDeveloper)
	})

	return r
}
